// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"digidrop/ent/filemiddleware"
	"digidrop/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FileMiddlewareCreate is the builder for creating a FileMiddleware entity.
type FileMiddlewareCreate struct {
	config
	mutation *FileMiddlewareMutation
	hooks    []Hook
}

// SetURLID sets the "url_id" field.
func (fmc *FileMiddlewareCreate) SetURLID(s string) *FileMiddlewareCreate {
	fmc.mutation.SetURLID(s)
	return fmc
}

// SetFilePath sets the "file_path" field.
func (fmc *FileMiddlewareCreate) SetFilePath(s string) *FileMiddlewareCreate {
	fmc.mutation.SetFilePath(s)
	return fmc
}

// SetAccessed sets the "accessed" field.
func (fmc *FileMiddlewareCreate) SetAccessed(b bool) *FileMiddlewareCreate {
	fmc.mutation.SetAccessed(b)
	return fmc
}

// SetNillableAccessed sets the "accessed" field if the given value is not nil.
func (fmc *FileMiddlewareCreate) SetNillableAccessed(b *bool) *FileMiddlewareCreate {
	if b != nil {
		fmc.SetAccessed(*b)
	}
	return fmc
}

// SetID sets the "id" field.
func (fmc *FileMiddlewareCreate) SetID(u uuid.UUID) *FileMiddlewareCreate {
	fmc.mutation.SetID(u)
	return fmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fmc *FileMiddlewareCreate) SetNillableID(u *uuid.UUID) *FileMiddlewareCreate {
	if u != nil {
		fmc.SetID(*u)
	}
	return fmc
}

// SetFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by ID.
func (fmc *FileMiddlewareCreate) SetFileMiddlewareToUserID(id uuid.UUID) *FileMiddlewareCreate {
	fmc.mutation.SetFileMiddlewareToUserID(id)
	return fmc
}

// SetNillableFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by ID if the given value is not nil.
func (fmc *FileMiddlewareCreate) SetNillableFileMiddlewareToUserID(id *uuid.UUID) *FileMiddlewareCreate {
	if id != nil {
		fmc = fmc.SetFileMiddlewareToUserID(*id)
	}
	return fmc
}

// SetFileMiddlewareToUser sets the "FileMiddlewareToUser" edge to the User entity.
func (fmc *FileMiddlewareCreate) SetFileMiddlewareToUser(u *User) *FileMiddlewareCreate {
	return fmc.SetFileMiddlewareToUserID(u.ID)
}

// Mutation returns the FileMiddlewareMutation object of the builder.
func (fmc *FileMiddlewareCreate) Mutation() *FileMiddlewareMutation {
	return fmc.mutation
}

// Save creates the FileMiddleware in the database.
func (fmc *FileMiddlewareCreate) Save(ctx context.Context) (*FileMiddleware, error) {
	var (
		err  error
		node *FileMiddleware
	)
	fmc.defaults()
	if len(fmc.hooks) == 0 {
		if err = fmc.check(); err != nil {
			return nil, err
		}
		node, err = fmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMiddlewareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fmc.check(); err != nil {
				return nil, err
			}
			fmc.mutation = mutation
			if node, err = fmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fmc.hooks) - 1; i >= 0; i-- {
			if fmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fmc *FileMiddlewareCreate) SaveX(ctx context.Context) *FileMiddleware {
	v, err := fmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmc *FileMiddlewareCreate) Exec(ctx context.Context) error {
	_, err := fmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmc *FileMiddlewareCreate) ExecX(ctx context.Context) {
	if err := fmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fmc *FileMiddlewareCreate) defaults() {
	if _, ok := fmc.mutation.Accessed(); !ok {
		v := filemiddleware.DefaultAccessed
		fmc.mutation.SetAccessed(v)
	}
	if _, ok := fmc.mutation.ID(); !ok {
		v := filemiddleware.DefaultID()
		fmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fmc *FileMiddlewareCreate) check() error {
	if _, ok := fmc.mutation.URLID(); !ok {
		return &ValidationError{Name: "url_id", err: errors.New(`ent: missing required field "FileMiddleware.url_id"`)}
	}
	if _, ok := fmc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New(`ent: missing required field "FileMiddleware.file_path"`)}
	}
	if _, ok := fmc.mutation.Accessed(); !ok {
		return &ValidationError{Name: "accessed", err: errors.New(`ent: missing required field "FileMiddleware.accessed"`)}
	}
	return nil
}

func (fmc *FileMiddlewareCreate) sqlSave(ctx context.Context) (*FileMiddleware, error) {
	_node, _spec := fmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fmc *FileMiddlewareCreate) createSpec() (*FileMiddleware, *sqlgraph.CreateSpec) {
	var (
		_node = &FileMiddleware{config: fmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: filemiddleware.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: filemiddleware.FieldID,
			},
		}
	)
	if id, ok := fmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fmc.mutation.URLID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filemiddleware.FieldURLID,
		})
		_node.URLID = value
	}
	if value, ok := fmc.mutation.FilePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filemiddleware.FieldFilePath,
		})
		_node.FilePath = value
	}
	if value, ok := fmc.mutation.Accessed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filemiddleware.FieldAccessed,
		})
		_node.Accessed = value
	}
	if nodes := fmc.mutation.FileMiddlewareToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filemiddleware.FileMiddlewareToUserTable,
			Columns: []string{filemiddleware.FileMiddlewareToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_middleware_file_middleware_to_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileMiddlewareCreateBulk is the builder for creating many FileMiddleware entities in bulk.
type FileMiddlewareCreateBulk struct {
	config
	builders []*FileMiddlewareCreate
}

// Save creates the FileMiddleware entities in the database.
func (fmcb *FileMiddlewareCreateBulk) Save(ctx context.Context) ([]*FileMiddleware, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fmcb.builders))
	nodes := make([]*FileMiddleware, len(fmcb.builders))
	mutators := make([]Mutator, len(fmcb.builders))
	for i := range fmcb.builders {
		func(i int, root context.Context) {
			builder := fmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMiddlewareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fmcb *FileMiddlewareCreateBulk) SaveX(ctx context.Context) []*FileMiddleware {
	v, err := fmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fmcb *FileMiddlewareCreateBulk) Exec(ctx context.Context) error {
	_, err := fmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmcb *FileMiddlewareCreateBulk) ExecX(ctx context.Context) {
	if err := fmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
