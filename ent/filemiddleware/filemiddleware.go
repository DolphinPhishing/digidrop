// Code generated by entc, DO NOT EDIT.

package filemiddleware

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the filemiddleware type in the database.
	Label = "file_middleware"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURLID holds the string denoting the url_id field in the database.
	FieldURLID = "url_id"
	// FieldFilePath holds the string denoting the file_path field in the database.
	FieldFilePath = "file_path"
	// FieldAccessed holds the string denoting the accessed field in the database.
	FieldAccessed = "accessed"
	// EdgeFileMiddlewareToUser holds the string denoting the filemiddlewaretouser edge name in mutations.
	EdgeFileMiddlewareToUser = "FileMiddlewareToUser"
	// Table holds the table name of the filemiddleware in the database.
	Table = "file_middlewares"
	// FileMiddlewareToUserTable is the table that holds the FileMiddlewareToUser relation/edge.
	FileMiddlewareToUserTable = "file_middlewares"
	// FileMiddlewareToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FileMiddlewareToUserInverseTable = "users"
	// FileMiddlewareToUserColumn is the table column denoting the FileMiddlewareToUser relation/edge.
	FileMiddlewareToUserColumn = "file_middleware_file_middleware_to_user"
)

// Columns holds all SQL columns for filemiddleware fields.
var Columns = []string{
	FieldID,
	FieldURLID,
	FieldFilePath,
	FieldAccessed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "file_middlewares"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"file_middleware_file_middleware_to_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAccessed holds the default value on creation for the "accessed" field.
	DefaultAccessed bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
