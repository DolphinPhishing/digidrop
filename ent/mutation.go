// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"digidrop/ent/filemiddleware"
	"digidrop/ent/predicate"
	"digidrop/ent/user"
	"errors"
	"fmt"
	"sync"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFileMiddleware = "FileMiddleware"
	TypeUser           = "User"
)

// FileMiddlewareMutation represents an operation that mutates the FileMiddleware nodes in the graph.
type FileMiddlewareMutation struct {
	config
	op                           Op
	typ                          string
	id                           *uuid.UUID
	url_id                       *string
	file_path                    *string
	accessed                     *bool
	clearedFields                map[string]struct{}
	_FileMiddlewareToUser        *uuid.UUID
	cleared_FileMiddlewareToUser bool
	done                         bool
	oldValue                     func(context.Context) (*FileMiddleware, error)
	predicates                   []predicate.FileMiddleware
}

var _ ent.Mutation = (*FileMiddlewareMutation)(nil)

// filemiddlewareOption allows management of the mutation configuration using functional options.
type filemiddlewareOption func(*FileMiddlewareMutation)

// newFileMiddlewareMutation creates new mutation for the FileMiddleware entity.
func newFileMiddlewareMutation(c config, op Op, opts ...filemiddlewareOption) *FileMiddlewareMutation {
	m := &FileMiddlewareMutation{
		config:        c,
		op:            op,
		typ:           TypeFileMiddleware,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileMiddlewareID sets the ID field of the mutation.
func withFileMiddlewareID(id uuid.UUID) filemiddlewareOption {
	return func(m *FileMiddlewareMutation) {
		var (
			err   error
			once  sync.Once
			value *FileMiddleware
		)
		m.oldValue = func(ctx context.Context) (*FileMiddleware, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileMiddleware.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileMiddleware sets the old FileMiddleware of the mutation.
func withFileMiddleware(node *FileMiddleware) filemiddlewareOption {
	return func(m *FileMiddlewareMutation) {
		m.oldValue = func(context.Context) (*FileMiddleware, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMiddlewareMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMiddlewareMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FileMiddleware entities.
func (m *FileMiddlewareMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMiddlewareMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMiddlewareMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FileMiddleware.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURLID sets the "url_id" field.
func (m *FileMiddlewareMutation) SetURLID(s string) {
	m.url_id = &s
}

// URLID returns the value of the "url_id" field in the mutation.
func (m *FileMiddlewareMutation) URLID() (r string, exists bool) {
	v := m.url_id
	if v == nil {
		return
	}
	return *v, true
}

// OldURLID returns the old "url_id" field's value of the FileMiddleware entity.
// If the FileMiddleware object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMiddlewareMutation) OldURLID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLID: %w", err)
	}
	return oldValue.URLID, nil
}

// ResetURLID resets all changes to the "url_id" field.
func (m *FileMiddlewareMutation) ResetURLID() {
	m.url_id = nil
}

// SetFilePath sets the "file_path" field.
func (m *FileMiddlewareMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *FileMiddlewareMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the FileMiddleware entity.
// If the FileMiddleware object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMiddlewareMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *FileMiddlewareMutation) ResetFilePath() {
	m.file_path = nil
}

// SetAccessed sets the "accessed" field.
func (m *FileMiddlewareMutation) SetAccessed(b bool) {
	m.accessed = &b
}

// Accessed returns the value of the "accessed" field in the mutation.
func (m *FileMiddlewareMutation) Accessed() (r bool, exists bool) {
	v := m.accessed
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessed returns the old "accessed" field's value of the FileMiddleware entity.
// If the FileMiddleware object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMiddlewareMutation) OldAccessed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessed: %w", err)
	}
	return oldValue.Accessed, nil
}

// ResetAccessed resets all changes to the "accessed" field.
func (m *FileMiddlewareMutation) ResetAccessed() {
	m.accessed = nil
}

// SetFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by id.
func (m *FileMiddlewareMutation) SetFileMiddlewareToUserID(id uuid.UUID) {
	m._FileMiddlewareToUser = &id
}

// ClearFileMiddlewareToUser clears the "FileMiddlewareToUser" edge to the User entity.
func (m *FileMiddlewareMutation) ClearFileMiddlewareToUser() {
	m.cleared_FileMiddlewareToUser = true
}

// FileMiddlewareToUserCleared reports if the "FileMiddlewareToUser" edge to the User entity was cleared.
func (m *FileMiddlewareMutation) FileMiddlewareToUserCleared() bool {
	return m.cleared_FileMiddlewareToUser
}

// FileMiddlewareToUserID returns the "FileMiddlewareToUser" edge ID in the mutation.
func (m *FileMiddlewareMutation) FileMiddlewareToUserID() (id uuid.UUID, exists bool) {
	if m._FileMiddlewareToUser != nil {
		return *m._FileMiddlewareToUser, true
	}
	return
}

// FileMiddlewareToUserIDs returns the "FileMiddlewareToUser" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileMiddlewareToUserID instead. It exists only for internal usage by the builders.
func (m *FileMiddlewareMutation) FileMiddlewareToUserIDs() (ids []uuid.UUID) {
	if id := m._FileMiddlewareToUser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFileMiddlewareToUser resets all changes to the "FileMiddlewareToUser" edge.
func (m *FileMiddlewareMutation) ResetFileMiddlewareToUser() {
	m._FileMiddlewareToUser = nil
	m.cleared_FileMiddlewareToUser = false
}

// Where appends a list predicates to the FileMiddlewareMutation builder.
func (m *FileMiddlewareMutation) Where(ps ...predicate.FileMiddleware) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FileMiddlewareMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileMiddleware).
func (m *FileMiddlewareMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMiddlewareMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.url_id != nil {
		fields = append(fields, filemiddleware.FieldURLID)
	}
	if m.file_path != nil {
		fields = append(fields, filemiddleware.FieldFilePath)
	}
	if m.accessed != nil {
		fields = append(fields, filemiddleware.FieldAccessed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMiddlewareMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case filemiddleware.FieldURLID:
		return m.URLID()
	case filemiddleware.FieldFilePath:
		return m.FilePath()
	case filemiddleware.FieldAccessed:
		return m.Accessed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMiddlewareMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case filemiddleware.FieldURLID:
		return m.OldURLID(ctx)
	case filemiddleware.FieldFilePath:
		return m.OldFilePath(ctx)
	case filemiddleware.FieldAccessed:
		return m.OldAccessed(ctx)
	}
	return nil, fmt.Errorf("unknown FileMiddleware field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMiddlewareMutation) SetField(name string, value ent.Value) error {
	switch name {
	case filemiddleware.FieldURLID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLID(v)
		return nil
	case filemiddleware.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case filemiddleware.FieldAccessed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessed(v)
		return nil
	}
	return fmt.Errorf("unknown FileMiddleware field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMiddlewareMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMiddlewareMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMiddlewareMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FileMiddleware numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMiddlewareMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMiddlewareMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMiddlewareMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileMiddleware nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMiddlewareMutation) ResetField(name string) error {
	switch name {
	case filemiddleware.FieldURLID:
		m.ResetURLID()
		return nil
	case filemiddleware.FieldFilePath:
		m.ResetFilePath()
		return nil
	case filemiddleware.FieldAccessed:
		m.ResetAccessed()
		return nil
	}
	return fmt.Errorf("unknown FileMiddleware field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMiddlewareMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._FileMiddlewareToUser != nil {
		edges = append(edges, filemiddleware.EdgeFileMiddlewareToUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMiddlewareMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case filemiddleware.EdgeFileMiddlewareToUser:
		if id := m._FileMiddlewareToUser; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMiddlewareMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMiddlewareMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMiddlewareMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_FileMiddlewareToUser {
		edges = append(edges, filemiddleware.EdgeFileMiddlewareToUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMiddlewareMutation) EdgeCleared(name string) bool {
	switch name {
	case filemiddleware.EdgeFileMiddlewareToUser:
		return m.cleared_FileMiddlewareToUser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMiddlewareMutation) ClearEdge(name string) error {
	switch name {
	case filemiddleware.EdgeFileMiddlewareToUser:
		m.ClearFileMiddlewareToUser()
		return nil
	}
	return fmt.Errorf("unknown FileMiddleware unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMiddlewareMutation) ResetEdge(name string) error {
	switch name {
	case filemiddleware.EdgeFileMiddlewareToUser:
		m.ResetFileMiddlewareToUser()
		return nil
	}
	return fmt.Errorf("unknown FileMiddleware edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	name                           *string
	_type                          *user.Type
	clearedFields                  map[string]struct{}
	_UserFromFileMiddleware        map[uuid.UUID]struct{}
	removed_UserFromFileMiddleware map[uuid.UUID]struct{}
	cleared_UserFromFileMiddleware bool
	done                           bool
	oldValue                       func(context.Context) (*User, error)
	predicates                     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(u user.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r user.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v user.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// AddUserFromFileMiddlewareIDs adds the "UserFromFileMiddleware" edge to the FileMiddleware entity by ids.
func (m *UserMutation) AddUserFromFileMiddlewareIDs(ids ...uuid.UUID) {
	if m._UserFromFileMiddleware == nil {
		m._UserFromFileMiddleware = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._UserFromFileMiddleware[ids[i]] = struct{}{}
	}
}

// ClearUserFromFileMiddleware clears the "UserFromFileMiddleware" edge to the FileMiddleware entity.
func (m *UserMutation) ClearUserFromFileMiddleware() {
	m.cleared_UserFromFileMiddleware = true
}

// UserFromFileMiddlewareCleared reports if the "UserFromFileMiddleware" edge to the FileMiddleware entity was cleared.
func (m *UserMutation) UserFromFileMiddlewareCleared() bool {
	return m.cleared_UserFromFileMiddleware
}

// RemoveUserFromFileMiddlewareIDs removes the "UserFromFileMiddleware" edge to the FileMiddleware entity by IDs.
func (m *UserMutation) RemoveUserFromFileMiddlewareIDs(ids ...uuid.UUID) {
	if m.removed_UserFromFileMiddleware == nil {
		m.removed_UserFromFileMiddleware = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._UserFromFileMiddleware, ids[i])
		m.removed_UserFromFileMiddleware[ids[i]] = struct{}{}
	}
}

// RemovedUserFromFileMiddleware returns the removed IDs of the "UserFromFileMiddleware" edge to the FileMiddleware entity.
func (m *UserMutation) RemovedUserFromFileMiddlewareIDs() (ids []uuid.UUID) {
	for id := range m.removed_UserFromFileMiddleware {
		ids = append(ids, id)
	}
	return
}

// UserFromFileMiddlewareIDs returns the "UserFromFileMiddleware" edge IDs in the mutation.
func (m *UserMutation) UserFromFileMiddlewareIDs() (ids []uuid.UUID) {
	for id := range m._UserFromFileMiddleware {
		ids = append(ids, id)
	}
	return
}

// ResetUserFromFileMiddleware resets all changes to the "UserFromFileMiddleware" edge.
func (m *UserMutation) ResetUserFromFileMiddleware() {
	m._UserFromFileMiddleware = nil
	m.cleared_UserFromFileMiddleware = false
	m.removed_UserFromFileMiddleware = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldType:
		v, ok := value.(user.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._UserFromFileMiddleware != nil {
		edges = append(edges, user.EdgeUserFromFileMiddleware)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserFromFileMiddleware:
		ids := make([]ent.Value, 0, len(m._UserFromFileMiddleware))
		for id := range m._UserFromFileMiddleware {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_UserFromFileMiddleware != nil {
		edges = append(edges, user.EdgeUserFromFileMiddleware)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserFromFileMiddleware:
		ids := make([]ent.Value, 0, len(m.removed_UserFromFileMiddleware))
		for id := range m.removed_UserFromFileMiddleware {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_UserFromFileMiddleware {
		edges = append(edges, user.EdgeUserFromFileMiddleware)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserFromFileMiddleware:
		return m.cleared_UserFromFileMiddleware
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserFromFileMiddleware:
		m.ResetUserFromFileMiddleware()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
