// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"digidrop/ent/filemiddleware"
	"digidrop/ent/predicate"
	"digidrop/ent/user"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FileMiddlewareUpdate is the builder for updating FileMiddleware entities.
type FileMiddlewareUpdate struct {
	config
	hooks    []Hook
	mutation *FileMiddlewareMutation
}

// Where appends a list predicates to the FileMiddlewareUpdate builder.
func (fmu *FileMiddlewareUpdate) Where(ps ...predicate.FileMiddleware) *FileMiddlewareUpdate {
	fmu.mutation.Where(ps...)
	return fmu
}

// SetURLID sets the "url_id" field.
func (fmu *FileMiddlewareUpdate) SetURLID(s string) *FileMiddlewareUpdate {
	fmu.mutation.SetURLID(s)
	return fmu
}

// SetFilePath sets the "file_path" field.
func (fmu *FileMiddlewareUpdate) SetFilePath(s string) *FileMiddlewareUpdate {
	fmu.mutation.SetFilePath(s)
	return fmu
}

// SetAccessed sets the "accessed" field.
func (fmu *FileMiddlewareUpdate) SetAccessed(b bool) *FileMiddlewareUpdate {
	fmu.mutation.SetAccessed(b)
	return fmu
}

// SetNillableAccessed sets the "accessed" field if the given value is not nil.
func (fmu *FileMiddlewareUpdate) SetNillableAccessed(b *bool) *FileMiddlewareUpdate {
	if b != nil {
		fmu.SetAccessed(*b)
	}
	return fmu
}

// SetFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by ID.
func (fmu *FileMiddlewareUpdate) SetFileMiddlewareToUserID(id uuid.UUID) *FileMiddlewareUpdate {
	fmu.mutation.SetFileMiddlewareToUserID(id)
	return fmu
}

// SetNillableFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by ID if the given value is not nil.
func (fmu *FileMiddlewareUpdate) SetNillableFileMiddlewareToUserID(id *uuid.UUID) *FileMiddlewareUpdate {
	if id != nil {
		fmu = fmu.SetFileMiddlewareToUserID(*id)
	}
	return fmu
}

// SetFileMiddlewareToUser sets the "FileMiddlewareToUser" edge to the User entity.
func (fmu *FileMiddlewareUpdate) SetFileMiddlewareToUser(u *User) *FileMiddlewareUpdate {
	return fmu.SetFileMiddlewareToUserID(u.ID)
}

// Mutation returns the FileMiddlewareMutation object of the builder.
func (fmu *FileMiddlewareUpdate) Mutation() *FileMiddlewareMutation {
	return fmu.mutation
}

// ClearFileMiddlewareToUser clears the "FileMiddlewareToUser" edge to the User entity.
func (fmu *FileMiddlewareUpdate) ClearFileMiddlewareToUser() *FileMiddlewareUpdate {
	fmu.mutation.ClearFileMiddlewareToUser()
	return fmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fmu *FileMiddlewareUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fmu.hooks) == 0 {
		affected, err = fmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMiddlewareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fmu.mutation = mutation
			affected, err = fmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fmu.hooks) - 1; i >= 0; i-- {
			if fmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fmu *FileMiddlewareUpdate) SaveX(ctx context.Context) int {
	affected, err := fmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fmu *FileMiddlewareUpdate) Exec(ctx context.Context) error {
	_, err := fmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmu *FileMiddlewareUpdate) ExecX(ctx context.Context) {
	if err := fmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fmu *FileMiddlewareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filemiddleware.Table,
			Columns: filemiddleware.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: filemiddleware.FieldID,
			},
		},
	}
	if ps := fmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fmu.mutation.URLID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filemiddleware.FieldURLID,
		})
	}
	if value, ok := fmu.mutation.FilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filemiddleware.FieldFilePath,
		})
	}
	if value, ok := fmu.mutation.Accessed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filemiddleware.FieldAccessed,
		})
	}
	if fmu.mutation.FileMiddlewareToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filemiddleware.FileMiddlewareToUserTable,
			Columns: []string{filemiddleware.FileMiddlewareToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fmu.mutation.FileMiddlewareToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filemiddleware.FileMiddlewareToUserTable,
			Columns: []string{filemiddleware.FileMiddlewareToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filemiddleware.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FileMiddlewareUpdateOne is the builder for updating a single FileMiddleware entity.
type FileMiddlewareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMiddlewareMutation
}

// SetURLID sets the "url_id" field.
func (fmuo *FileMiddlewareUpdateOne) SetURLID(s string) *FileMiddlewareUpdateOne {
	fmuo.mutation.SetURLID(s)
	return fmuo
}

// SetFilePath sets the "file_path" field.
func (fmuo *FileMiddlewareUpdateOne) SetFilePath(s string) *FileMiddlewareUpdateOne {
	fmuo.mutation.SetFilePath(s)
	return fmuo
}

// SetAccessed sets the "accessed" field.
func (fmuo *FileMiddlewareUpdateOne) SetAccessed(b bool) *FileMiddlewareUpdateOne {
	fmuo.mutation.SetAccessed(b)
	return fmuo
}

// SetNillableAccessed sets the "accessed" field if the given value is not nil.
func (fmuo *FileMiddlewareUpdateOne) SetNillableAccessed(b *bool) *FileMiddlewareUpdateOne {
	if b != nil {
		fmuo.SetAccessed(*b)
	}
	return fmuo
}

// SetFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by ID.
func (fmuo *FileMiddlewareUpdateOne) SetFileMiddlewareToUserID(id uuid.UUID) *FileMiddlewareUpdateOne {
	fmuo.mutation.SetFileMiddlewareToUserID(id)
	return fmuo
}

// SetNillableFileMiddlewareToUserID sets the "FileMiddlewareToUser" edge to the User entity by ID if the given value is not nil.
func (fmuo *FileMiddlewareUpdateOne) SetNillableFileMiddlewareToUserID(id *uuid.UUID) *FileMiddlewareUpdateOne {
	if id != nil {
		fmuo = fmuo.SetFileMiddlewareToUserID(*id)
	}
	return fmuo
}

// SetFileMiddlewareToUser sets the "FileMiddlewareToUser" edge to the User entity.
func (fmuo *FileMiddlewareUpdateOne) SetFileMiddlewareToUser(u *User) *FileMiddlewareUpdateOne {
	return fmuo.SetFileMiddlewareToUserID(u.ID)
}

// Mutation returns the FileMiddlewareMutation object of the builder.
func (fmuo *FileMiddlewareUpdateOne) Mutation() *FileMiddlewareMutation {
	return fmuo.mutation
}

// ClearFileMiddlewareToUser clears the "FileMiddlewareToUser" edge to the User entity.
func (fmuo *FileMiddlewareUpdateOne) ClearFileMiddlewareToUser() *FileMiddlewareUpdateOne {
	fmuo.mutation.ClearFileMiddlewareToUser()
	return fmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fmuo *FileMiddlewareUpdateOne) Select(field string, fields ...string) *FileMiddlewareUpdateOne {
	fmuo.fields = append([]string{field}, fields...)
	return fmuo
}

// Save executes the query and returns the updated FileMiddleware entity.
func (fmuo *FileMiddlewareUpdateOne) Save(ctx context.Context) (*FileMiddleware, error) {
	var (
		err  error
		node *FileMiddleware
	)
	if len(fmuo.hooks) == 0 {
		node, err = fmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileMiddlewareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fmuo.mutation = mutation
			node, err = fmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fmuo.hooks) - 1; i >= 0; i-- {
			if fmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fmuo *FileMiddlewareUpdateOne) SaveX(ctx context.Context) *FileMiddleware {
	node, err := fmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fmuo *FileMiddlewareUpdateOne) Exec(ctx context.Context) error {
	_, err := fmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fmuo *FileMiddlewareUpdateOne) ExecX(ctx context.Context) {
	if err := fmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fmuo *FileMiddlewareUpdateOne) sqlSave(ctx context.Context) (_node *FileMiddleware, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filemiddleware.Table,
			Columns: filemiddleware.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: filemiddleware.FieldID,
			},
		},
	}
	id, ok := fmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileMiddleware.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filemiddleware.FieldID)
		for _, f := range fields {
			if !filemiddleware.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filemiddleware.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fmuo.mutation.URLID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filemiddleware.FieldURLID,
		})
	}
	if value, ok := fmuo.mutation.FilePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filemiddleware.FieldFilePath,
		})
	}
	if value, ok := fmuo.mutation.Accessed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filemiddleware.FieldAccessed,
		})
	}
	if fmuo.mutation.FileMiddlewareToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filemiddleware.FileMiddlewareToUserTable,
			Columns: []string{filemiddleware.FileMiddlewareToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fmuo.mutation.FileMiddlewareToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filemiddleware.FileMiddlewareToUserTable,
			Columns: []string{filemiddleware.FileMiddlewareToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileMiddleware{config: fmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filemiddleware.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
