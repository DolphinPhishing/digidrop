// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeUserFromFileMiddleware holds the string denoting the userfromfilemiddleware edge name in mutations.
	EdgeUserFromFileMiddleware = "UserFromFileMiddleware"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UserFromFileMiddlewareTable is the table that holds the UserFromFileMiddleware relation/edge.
	UserFromFileMiddlewareTable = "file_middlewares"
	// UserFromFileMiddlewareInverseTable is the table name for the FileMiddleware entity.
	// It exists in this package in order to avoid circular dependency with the "filemiddleware" package.
	UserFromFileMiddlewareInverseTable = "file_middlewares"
	// UserFromFileMiddlewareColumn is the table column denoting the UserFromFileMiddleware relation/edge.
	UserFromFileMiddlewareColumn = "file_middleware_file_middleware_to_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeADMIN Type = "ADMIN"
	TypeUSER  Type = "USER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeADMIN, TypeUSER:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
